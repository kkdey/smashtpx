move <- list(theta=t(phi_smoothed), omega=moveEM$omega)
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
move$theta
move$omega[1:5,]
dif <- abs(QNup_L-L)
L <- QNup_L
admix <- TRUE
grp
grp <- NULL
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
QNup_L
dif <- abs(QNup_L-L)
## iterate
iter <- iter+1
theta <- move$theta
omega <- move$omega
source('~/Documents/smashtpx/R/smash.topics.R')
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
omega <- topic_clus_1$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(as.character(dat$g),
levels=unique(dat$g)) )
rownames(omega) <- annotation$sample_id
cols1 <- c(rev(RColorBrewer::brewer.pal(12, "Paired"))[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
CountClust::StructureGGplot(omega = omega,
annotation= annotation,
palette = cols1,
yaxis_label = "",
order_sample = TRUE,
split_line = list(split_lwd = .1,
split_col = "white"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 5,
axis_label_face="bold"))
plot(topic_clus_1$theta[,1], type="l", col="red")
lines(topic_clus_1$theta[,2], type="l", col="green")
lines(topic_clus_1$theta[,3], type="l", col="blue")
kmeans.init=kmeans(counts, K, nstart=5, iter.max=100)
phi0 = kmeans.init$centers;
phi0 = t(apply(phi0, 1, function(x) return(x/sum(x))))
theta <- t(phi0);
omega = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
theta
dim(theta)
colSums(theta)
L <- smash.tpxlpost(X=X, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp);
L
iter <- 0
dif <- tol+1+qn
update <- TRUE
row_total <- tapply(X$v, X$i, sum);
if(verb){ cat(paste("Fitting the",K,"topic model.\n")) }
if(verb>0){
cat("log posterior increase: " )
digits <- max(1, -floor(log(tol, base=10))) }
y <- as.matrix(X);
Y <- NULL;
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda.unsmoothed <- moveEM$lambda;
moveEM$theta
lambda=smooth.lambda(moveEM$lambda)
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
phi_smoothed=lambda/moveEM$lscale
move <- list(theta=t(phi_smoothed), omega=moveEM$omega)
phi_smoothed
plot(phi_smoothed[1,])
plot(phi_smoothed[2,])
plot(phi_smoothed[3,])
plot(phi_smoothed[3,], type="l", col="red")
plot(phi_smoothed[2,], type="l", col="green")
plot(phi_smoothed[1,], type="l", col="blue")
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
QNup_L
L
iter <- iter+1
theta <- move$theta
omega <- move$omega
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda.unsmoothed <- moveEM$lambda;
lambda=smooth.lambda(moveEM$lambda)
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
phi_smoothed=lambda/moveEM$lscale
move <- list(theta=t(phi_smoothed), omega=moveEM$omega)
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
QNup_L
L
plot(move$theta[1,])
plot(move$theta[,1])
plot(move$theta[,1], type="l", col="red")
plot(move$theta[,2], type="l", col="green")
lines(move$theta[,3], col="blue")
lines(move$theta[,1], col="red")
dif <- abs(QNup_L-L)
dif
L <- QNup_L
## iterate
iter <- iter+1
theta <- move$theta
omega <- move$omega
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda.unsmoothed <- moveEM$lambda;
lambda=smooth.lambda(moveEM$lambda)
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
phi_smoothed=lambda/moveEM$lscale
move <- list(theta=t(phi_smoothed), omega=moveEM$omega)
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
QNup_L
L
plot(move$theta[,1], type="l", col="red")
lines(move$theta[,2], col="green")
lines(move$theta[,3], col="blue")
dif <- abs(QNup_L-L)
L <- QNup_L
dif
iter <- iter+1
theta <- move$theta
omega <- move$omega
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda.unsmoothed <- moveEM$lambda;
lambda=smooth.lambda(moveEM$lambda)
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
phi_smoothed=lambda/moveEM$lscale
move <- list(theta=t(phi_smoothed), omega=moveEM$omega)
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
QNup_L - L
plot(move$theta[,1], type="l", col="red")
lines(move$theta[,2], col="blue")
lines(move$theta[,3], col="green")
iter <- iter+1
theta <- move$theta
omega <- move$omega
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda.unsmoothed <- moveEM$lambda;
lambda=smooth.lambda(moveEM$lambda)
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
phi_smoothed=lambda/moveEM$lscale
move <- list(theta=t(phi_smoothed), omega=moveEM$omega)
QNup_L <-  smash.tpxlpost(X, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
QNup_L - L
plot(move$theta[,1], type="l", col="red")
lines(move$theta[,2], col="green")
lines(move$theta[,3], col="blue")
y <- as.matrix(X);
dim(y)
rm(list=ls())
source('~/Documents/smashtpx/R/smash.topics.R')
source('~/Documents/smashtpx/R/smash.tpx.R')
source('~/Documents/smashtpx/R/smash.count.R')
source('~/Documents/smashtpx/R/smash.topics.R')
dat <- get(load("../data/OAS1.Robj"));
counts <- as.matrix(dat$M$M)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
plot(topic_clus_1$theta[,1], type="l", col="red")
lines(topic_clus_1$theta[,2], type="l", col="green")
lines(topic_clus_1$theta[,3], type="l", col="blue")
topic_clus_1$theta
colSums(topic_clus_1$theta)
source('~/Documents/smashtpx/R/smash.topics.R')
source('~/Documents/smashtpx/R/smash.topics.R')
kmeans.init=kmeans(fcounts, K, nstart=5, iter.max=100)
phi0 = kmeans.init$centers;
phi0 = t(apply(phi0, 1, function(x) return(x/sum(x))))
theta <- t(phi0);
omega = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
p
p <- ncol(X)
n <- nrow(X)
ceil <- ceiling(log(dim(counts)[2])/log(2));
if(log(dim(counts)[2])%%log(2)!=0) {
cat(sprintf("number of features not a power of 2"));
if(reflect){
fcounts <- cbind(counts, counts[,dim(counts)[2]-(1:(2^{ceil}-dim(counts)[2]))]);
}
if(!reflect){
fcounts <- cbind(counts, matrix(0, dim(counts)[1], 2^{ceil}-dim(counts)[2]));
}}else{
fcounts <- counts;
}
levels <- ceil+1;
X <- CheckCounts(fcounts)
library(smashr)
library(ashr)
p <- ncol(X)
n <- nrow(X)
if(verb>0)
cat(sprintf("\nEstimating on a %d document collection.\n", nrow(X)))
## check the prior parameters for theta
if(prod(shape>0) != 1){ stop("use shape > 0\n") }
## check the list of candidate K values
if(prod(K>1)!=1){ stop(cat("use K values > 1\n")) }
K <- sort(K)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
## initialize
K <- 3
ceil <- ceiling(log(dim(counts)[2])/log(2));
if(log(dim(counts)[2])%%log(2)!=0) {
cat(sprintf("number of features not a power of 2"));
if(reflect){
fcounts <- cbind(counts, counts[,dim(counts)[2]-(1:(2^{ceil}-dim(counts)[2]))]);
}
if(!reflect){
fcounts <- cbind(counts, matrix(0, dim(counts)[1], 2^{ceil}-dim(counts)[2]));
}}else{
fcounts <- counts;
}
levels <- ceil+1;
X <- CheckCounts(fcounts)
library(smashr)
library(ashr)
p <- ncol(X)
n <- nrow(X)
if(verb>0)
cat(sprintf("\nEstimating on a %d document collection.\n", nrow(X)))
## check the prior parameters for theta
if(prod(shape>0) != 1){ stop("use shape > 0\n") }
## check the list of candidate K values
if(prod(K>1)!=1){ stop(cat("use K values > 1\n")) }
K <- sort(K)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
## initialize
kmeans.init=kmeans(fcounts, K, nstart=5, iter.max=100)
phi0 = kmeans.init$centers;
phi0 = t(apply(phi0, 1, function(x) return(x/sum(x))))
theta <- t(phi0);
omega = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
omega
theta
omega
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
y <- as.matrix(X);
row_total <- tapply(X$v, X$i, sum);
y <- as.matrix(X);
row_total <- tapply(X$v, X$i, sum);
plot(theta[,1], type="l", col="red");
lines(theta[,2], col="blue");
lines(theta[,3], col="green")
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
moveEM$omega
moveEM$omega[1:5,]
smooth.lambda = function(lambda){
#return(t(apply(lambda,1,ashsmooth.pois,cxx = FALSE)))
return(t(apply(lambda,1,smashr::smash.poiss,cxx = FALSE)))
}
moveEM$lambda[1:3,1:3]
moveEM$theta[1:3,1:3]
lscale[1:3,1:3]
moveEM$lscale[1:3,1:3]
t(moveEM$theta[1:3,1:3])
moveEM$lambda[1:3,1:#]
moveEM$lambda[1:3,1:3]
source('~/Documents/smashtpx/R/smash.topics.R')
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
moveEM$theta
moveEM$theta[1:5,1:5]
moveEM$theta[1:5,1:3]
moveEM$theta[1:3,1:3]
moveEM$lambda[1:3,1:3]
lambda.unsmoothed <- moveEM$lambda;
lambda=smooth.lambda(moveEM$lambda)
lambda[1:3,1:3]
source('~/Documents/smashtpx/R/smash.topics.R')
setwd("~/Documents/sequence_clustering/src")
smoothed_counts <- get(load("smoothed_counts_OAS1_level_0.rda"))
index <- which(rowSums(smoothed_counts) == 0)
topic_clus_3 <- maptpx::topics(smoothed_counts[-index,], K=3, tol=0.1)
omega <- topic_clus_3$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(as.character(dat$g[-index]),
levels=unique(dat$g[-index])) )
rownames(omega) <- annotation$sample_id
cols1 <- c(rev(RColorBrewer::brewer.pal(12, "Paired"))[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
CountClust::StructureGGplot(omega = omega,
annotation= annotation,
palette = cols1,
yaxis_label = "",
order_sample = TRUE,
split_line = list(split_lwd = .1,
split_col = "white"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 5,
axis_label_face="bold"))
plot(topic_clus_3$theta[,1], type="l", col="red")
lines(topic_clus_3$theta[,2], type="l", col="green")
lines(topic_clus_3$theta[,3], type="l", col="blue")
smoothed_counts <- get(load("../rdas/smoothed_counts_OAS1_level_0.rda"))
index <- which(rowSums(smoothed_counts) == 0)
topic_clus_3 <- maptpx::topics(smoothed_counts[-index,], K=3, tol=0.1)
omega <- topic_clus_3$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(as.character(dat$g[-index]),
levels=unique(dat$g[-index])) )
rownames(omega) <- annotation$sample_id
cols1 <- c(rev(RColorBrewer::brewer.pal(12, "Paired"))[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
CountClust::StructureGGplot(omega = omega,
annotation= annotation,
palette = cols1,
yaxis_label = "",
order_sample = TRUE,
split_line = list(split_lwd = .1,
split_col = "white"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 5,
axis_label_face="bold"))
plot(topic_clus_3$theta[,1], type="l", col="red")
lines(topic_clus_3$theta[,2], type="l", col="green")
lines(topic_clus_3$theta[,3], type="l", col="blue")
dat <- get(load("../data/OAS1.Robj"));
counts <- as.matrix(dat$M$M)
library(smashtpx)
library(smashtpx)
library(maptpx)
library(CountClust)
dat <- get(load("../data/OAS1.Robj"));
counts <- as.matrix(dat$M$M)
dim(counts)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
library(smashtpx)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
y
library(smashtpx)
smashtpx
tpxlpost
smash.tpxlpost
library(smashtpx)
library(smashtpx)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
y
library(smashtpx)
library(smashtpx)
library(smashtpx)
library(smashtpx)
library(maptpx)
library(CountClust)
dat <- get(load("../data/OAS1.Robj"));
counts <- as.matrix(dat$M$M)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
library(smashtpx)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
library(smashtpx)
library(smashtpx)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
optional_ti_table
install_github("kkdey/smashr")
library(devtools)
install_github("kkdey/smashr")
packrat::snapshot(prompt = FALSE, project = '~/Documents/smashtpx')
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
library(ashr)
library(smashr)
library(smashtpx)
library(smashr)
library(ashr)
dat <- get(load("../data/OAS1.Robj"));
counts <- as.matrix(dat$M$M)
setwd("~/Documents/sequence_clustering/src")
dat <- get(load("../data/OAS1.Robj"));
counts <- as.matrix(dat$M$M)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
save(topic_clus_1, file="../rdas/smashtpx_on_OAS1.rda")
topic_clus_1 <- get(load(file="../rdas/smashtpx_on_OAS1.rda"))
omega <- topic_clus_1$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(as.character(dat$g),
levels=unique(dat$g)) )
rownames(omega) <- annotation$sample_id
cols1 <- c(rev(RColorBrewer::brewer.pal(12, "Paired"))[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
CountClust::StructureGGplot(omega = omega,
annotation= annotation,
palette = cols1,
yaxis_label = "",
order_sample = TRUE,
split_line = list(split_lwd = .1,
split_col = "white"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 5,
axis_label_face="bold"))
plot(topic_clus_1$theta[,1], type="l", col="red")
lines(topic_clus_1$theta[,2], type="l", col="green")
lines(topic_clus_1$theta[,3], type="l", col="blue")
source('~/Documents/smashtpx/R/smash.topics.R')
source('~/Documents/smashtpx/R/smash.count.R')
source('~/Documents/smashtpx/R/smash.tpx.R')
source('~/Documents/smashtpx/R/smash.topics.R')
topic_clus_1 <- smash.topics(counts,
K=3, tol = 0.01,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=40)
View(smash.tpxlpost)
library(smashtpx)
