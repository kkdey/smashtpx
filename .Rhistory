}
levels <- ceil+1;
X <- CheckCounts(fcounts)
y <- as.matrix(X);
p <- ncol(X)
n <- nrow(X)
if(verb>0)
cat(sprintf("\nEstimating on a %d document collection.\n", nrow(X)))
## check the prior parameters for theta
if(prod(shape>0) != 1){ stop("use shape > 0\n") }
## check the list of candidate K values
if(prod(K>1)!=1){ stop(cat("use K values > 1\n")) }
K <- sort(K)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
## initialize
if(init.method=="taddy"){
index_init <- 1:min(ceiling(nrow(X)*.05),100);
if(sample_init==TRUE){
samp_length <- length(index_init);
index_init <- sample(1:nrow(X),samp_length);
}
## initialize
if(init.adapt==FALSE){
initopics <- smash.tpxinit(X[index_init,], initopics, K[1],
shape, verb, nbundles=1, use_squarem=FALSE,
init.adapt)
#initopics <- t(gtools::rdirichlet(4, rep(1+ 1/K*B, B)))
}else{
#   if(change_start_points){
#      initopics <- smash.tpxinit(X[1:min(ceiling(nrow(X)*.05),100),], initopics, K[1]+3,
#                          shape, verb, nbundles=1, use_squarem=FALSE, init.adapt)
#      initopics <- initopics[,sort(sample(1:(K[1]+2), K[1], replace=FALSE))];
#   }else{
initopics <- smash.tpxinit(X[index_init,], initopics, K[1],
shape, verb, nbundles=1, use_squarem=FALSE,
init.adapt)
#    }
}
theta <- initopics
n <- nrow(X)
p <- ncol(X)
m <- row_sums(X)
if(is.null(alpha)){ alpha <- 1/(K*p) }
if(is.matrix(alpha)){ if(nrow(alpha)!=p || ncol(alpha)!=K){ stop("bad matrix alpha dimensions") }}
## recycle these in tpcweights to save time
xvo <- X$v[order(X$i)]
wrd <- X$j[order(X$i)]-1
doc <- c(0,cumsum(as.double(table(factor(X$i, levels=c(1:nrow(X)))))))
## Initialize
system.time(omega <- smash.tpxweights(n=n, p=p, xvo=xvo, wrd=wrd, doc=doc, start=smash.tpxOmegaStart(X,theta), theta=theta))
if(!admix){ omega <- matrix(apply(omega,2, function(w) tapply(w,grp,mean)), ncol=K) }
}
if(init.method=="kmeans"){
kmeans.init=kmeans(fcounts, K, nstart=5, iter.max=100)
phi0 = kmeans.init$centers;
phi0 = t(apply(phi0, 1, function(x) return(x/sum(x))))
theta <- t(phi0);
omega = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
}
alpha <- 1/(K*p)
if(is.matrix(alpha)){ if(nrow(alpha)!=p || ncol(alpha)!=K){ stop("bad matrix alpha dimensions") }}
# L <- smash.tpxlpost(y=y, theta=theta, omega=omega,
#                    alpha=alpha, admix=admix, grp=grp);
iter <- 0
dif <- tol+1+qn
update <- TRUE
row_total <- tapply(X$v, X$i, sum);
if(verb){ cat(paste("Fitting the",K,"topic model.\n")) }
if(verb>0){
cat("log posterior increase: " )
digits <- max(1, -floor(log(tol, base=10))) }
Y <- NULL;
iter <- 1
omega <- smash.normalizetpx(omega + 1e-15, byrow=TRUE);
theta <- smash.normalizetpx(theta + 1e-15, byrow=FALSE);
plot(theta[,1], type="l", col="red");
lines(theta[,2], col="blue");
lines(theta[,3], col="green")
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda <- moveEM$lambda;
lambda.unsmoothed <- moveEM$lambda;
if(with_qn){
moveQN <- list(theta = moveEM$theta, omega = moveEM$omega);
QNup <- smash.tpxQN(move=moveQN, Y=Y, y=y, alpha=alpha, verb=verb,
admix=admix, grp=grp, doqn=qn-dif)
lambda <- t(moveQN$theta)*moveEM$lscale;
}
#  L_new <- smash.tpxlpost(y=y, theta=move$theta, omega=move$omega, alpha=alpha, admix=admix, grp=grp)
#  QNup <- list("move"=move, "L"=L_new, "Y"=NULL)
## quasinewton-newton acceleration
# moveQN <- list(theta = moveEM$theta, omega = moveEM$omega);
# QNup <- smash.tpxQN(move=moveQN, Y=Y, y=y, alpha=alpha, verb=verb,
#                      admix=admix, grp=grp, doqn=qn-dif)
# move <- QNup$move
# lambda <- t(move$theta)*moveEM$lscale;
library(slam)
omega <- smash.normalizetpx(omega + 1e-15, byrow=TRUE);
theta <- smash.normalizetpx(theta + 1e-15, byrow=FALSE);
plot(theta[,1], type="l", col="red");
lines(theta[,2], col="blue");
lines(theta[,3], col="green")
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda <- moveEM$lambda;
lambda.unsmoothed <- moveEM$lambda;
if(with_qn){
moveQN <- list(theta = moveEM$theta, omega = moveEM$omega);
QNup <- smash.tpxQN(move=moveQN, Y=Y, y=y, alpha=alpha, verb=verb,
admix=admix, grp=grp, doqn=qn-dif)
lambda <- t(moveQN$theta)*moveEM$lscale;
}
#  L_new <- smash.tpxlpost(y=y, theta=move$theta, omega=move$omega, alpha=alpha, admix=admix, grp=grp)
#  QNup <- list("move"=move, "L"=L_new, "Y"=NULL)
## quasinewton-newton acceleration
# moveQN <- list(theta = moveEM$theta, omega = moveEM$omega);
# QNup <- smash.tpxQN(move=moveQN, Y=Y, y=y, alpha=alpha, verb=verb,
#                      admix=admix, grp=grp, doqn=qn-dif)
# move <- QNup$move
# lambda <- t(move$theta)*moveEM$lscale;
theta
ceil <- ceiling(log(dim(counts)[2])/log(2));
if(log(dim(counts)[2])%%log(2)!=0) {
cat(sprintf("number of features not a power of 2"));
if(reflect){
fcounts <- cbind(counts, counts[,dim(counts)[2]-(1:(2^{ceil}-dim(counts)[2]))]);
}
if(!reflect){
fcounts <- cbind(counts, matrix(0, dim(counts)[1], 2^{ceil}-dim(counts)[2]));
}}else{
fcounts <- counts;
}
levels <- ceil+1;
X <- CheckCounts(fcounts)
y <- as.matrix(X);
p <- ncol(X)
n <- nrow(X)
if(verb>0)
cat(sprintf("\nEstimating on a %d document collection.\n", nrow(X)))
## check the prior parameters for theta
if(prod(shape>0) != 1){ stop("use shape > 0\n") }
## check the list of candidate K values
if(prod(K>1)!=1){ stop(cat("use K values > 1\n")) }
K <- sort(K)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
## initialize
if(init.method=="taddy"){
index_init <- 1:min(ceiling(nrow(X)*.05),100);
if(sample_init==TRUE){
samp_length <- length(index_init);
index_init <- sample(1:nrow(X),samp_length);
}
## initialize
if(init.adapt==FALSE){
initopics <- smash.tpxinit(X[index_init,], initopics, K[1],
shape, verb, nbundles=1, use_squarem=FALSE,
init.adapt)
#initopics <- t(gtools::rdirichlet(4, rep(1+ 1/K*B, B)))
}else{
#   if(change_start_points){
#      initopics <- smash.tpxinit(X[1:min(ceiling(nrow(X)*.05),100),], initopics, K[1]+3,
#                          shape, verb, nbundles=1, use_squarem=FALSE, init.adapt)
#      initopics <- initopics[,sort(sample(1:(K[1]+2), K[1], replace=FALSE))];
#   }else{
initopics <- smash.tpxinit(X[index_init,], initopics, K[1],
shape, verb, nbundles=1, use_squarem=FALSE,
init.adapt)
#    }
}
theta <- initopics
n <- nrow(X)
p <- ncol(X)
m <- row_sums(X)
if(is.null(alpha)){ alpha <- 1/(K*p) }
if(is.matrix(alpha)){ if(nrow(alpha)!=p || ncol(alpha)!=K){ stop("bad matrix alpha dimensions") }}
## recycle these in tpcweights to save time
xvo <- X$v[order(X$i)]
wrd <- X$j[order(X$i)]-1
doc <- c(0,cumsum(as.double(table(factor(X$i, levels=c(1:nrow(X)))))))
## Initialize
system.time(omega <- smash.tpxweights(n=n, p=p, xvo=xvo, wrd=wrd, doc=doc, start=smash.tpxOmegaStart(X,theta), theta=theta))
if(!admix){ omega <- matrix(apply(omega,2, function(w) tapply(w,grp,mean)), ncol=K) }
}
library(smashtpx)
ceil <- ceiling(log(dim(counts)[2])/log(2));
if(log(dim(counts)[2])%%log(2)!=0) {
cat(sprintf("number of features not a power of 2"));
if(reflect){
fcounts <- cbind(counts, counts[,dim(counts)[2]-(1:(2^{ceil}-dim(counts)[2]))]);
}
if(!reflect){
fcounts <- cbind(counts, matrix(0, dim(counts)[1], 2^{ceil}-dim(counts)[2]));
}}else{
fcounts <- counts;
}
levels <- ceil+1;
X <- CheckCounts(fcounts)
y <- as.matrix(X);
p <- ncol(X)
n <- nrow(X)
if(verb>0)
cat(sprintf("\nEstimating on a %d document collection.\n", nrow(X)))
## check the prior parameters for theta
if(prod(shape>0) != 1){ stop("use shape > 0\n") }
## check the list of candidate K values
if(prod(K>1)!=1){ stop(cat("use K values > 1\n")) }
K <- sort(K)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
## initialize
if(init.method=="taddy"){
index_init <- 1:min(ceiling(nrow(X)*.05),100);
if(sample_init==TRUE){
samp_length <- length(index_init);
index_init <- sample(1:nrow(X),samp_length);
}
## initialize
if(init.adapt==FALSE){
initopics <- smash.tpxinit(X[index_init,], initopics, K[1],
shape, verb, nbundles=1, use_squarem=FALSE,
init.adapt)
#initopics <- t(gtools::rdirichlet(4, rep(1+ 1/K*B, B)))
}else{
#   if(change_start_points){
#      initopics <- smash.tpxinit(X[1:min(ceiling(nrow(X)*.05),100),], initopics, K[1]+3,
#                          shape, verb, nbundles=1, use_squarem=FALSE, init.adapt)
#      initopics <- initopics[,sort(sample(1:(K[1]+2), K[1], replace=FALSE))];
#   }else{
initopics <- smash.tpxinit(X[index_init,], initopics, K[1],
shape, verb, nbundles=1, use_squarem=FALSE,
init.adapt)
#    }
}
theta <- initopics
n <- nrow(X)
p <- ncol(X)
m <- row_sums(X)
if(is.null(alpha)){ alpha <- 1/(K*p) }
if(is.matrix(alpha)){ if(nrow(alpha)!=p || ncol(alpha)!=K){ stop("bad matrix alpha dimensions") }}
## recycle these in tpcweights to save time
xvo <- X$v[order(X$i)]
wrd <- X$j[order(X$i)]-1
doc <- c(0,cumsum(as.double(table(factor(X$i, levels=c(1:nrow(X)))))))
## Initialize
system.time(omega <- smash.tpxweights(n=n, p=p, xvo=xvo, wrd=wrd, doc=doc, start=smash.tpxOmegaStart(X,theta), theta=theta))
if(!admix){ omega <- matrix(apply(omega,2, function(w) tapply(w,grp,mean)), ncol=K) }
}
omega
theta
colSums(theta)
if(init.method=="kmeans"){
kmeans.init=kmeans(fcounts, K, nstart=5, iter.max=100)
phi0 = kmeans.init$centers;
phi0 = t(apply(phi0, 1, function(x) return(x/sum(x))))
theta <- t(phi0);
omega = rep(1,n)%o%normalize(as.vector(table(kmeans.init$cluster)))
}
alpha <- 1/(K*p)
if(is.matrix(alpha)){ if(nrow(alpha)!=p || ncol(alpha)!=K){ stop("bad matrix alpha dimensions") }}
# L <- smash.tpxlpost(y=y, theta=theta, omega=omega,
#                    alpha=alpha, admix=admix, grp=grp);
iter <- 0
dif <- tol+1+qn
update <- TRUE
row_total <- tapply(X$v, X$i, sum);
if(verb){ cat(paste("Fitting the",K,"topic model.\n")) }
if(verb>0){
cat("log posterior increase: " )
digits <- max(1, -floor(log(tol, base=10))) }
Y <- NULL;
iter <- 1
omega <- smash.normalizetpx(omega + 1e-15, byrow=TRUE);
theta <- smash.normalizetpx(theta + 1e-15, byrow=FALSE);
plot(theta[,1], type="l", col="red");
lines(theta[,2], col="blue");
lines(theta[,3], col="green")
m <- row_sums(X);
moveEM <- smash.tpxEM(y=y, m=m, theta=theta, omega=omega,
alpha=alpha, admix=admix, grp=grp)
lambda <- moveEM$lambda;
lambda.unsmoothed <- moveEM$lambda;
if(with_qn){
moveQN <- list(theta = moveEM$theta, omega = moveEM$omega);
QNup <- smash.tpxQN(move=moveQN, Y=Y, y=y, alpha=alpha, verb=verb,
admix=admix, grp=grp, doqn=qn-dif)
lambda <- t(moveQN$theta)*moveEM$lscale;
}
out=smooth.lambda.poiss(moveEM$lambda, optional_ti_table = NULL)
library(ashr)
out=smooth.lambda.poiss(moveEM$lambda, optional_ti_table = NULL)
lambda = out$est
smashL = out$logl
library(smashr)
out=smooth.lambda.poiss(moveEM$lambda, optional_ti_table = NULL)
lambda = out$est
smashL = out$logl
smashL
lambda[is.na(lambda)]=lambda.unsmoothed[is.na(lambda)]
lambda
phi_smoothed=lambda/moveEM$lscale
theta_smoothed <- t(phi_smoothed);
move <- list(theta=theta_smoothed, omega=omega)
L <-  smash.tpxlpost(y, theta = move$theta,
omega = move$omega, alpha=alpha,
admix=admix, grp=grp)
L <- L + smashL
L
source('~/Documents/smashtpx/R/smash.topics.R')
source('~/Documents/smashtpx/R/smash.tpx.R')
source('~/Documents/smashtpx/R/smash.count.R')
dim(counts)
topic_clus_1 <- smash.topics(counts,
K=3, tol = 10,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=50)
source('~/Documents/smashtpx/R/smash.topics.R')
topic_clus_1 <- smash.topics(counts,
K=3, tol = 10,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=50)
source('~/Documents/smashtpx/R/smash.topics.R')
topic_clus_1 <- smash.topics(counts,
K=3, tol = 10,
smash_gap=1,
smash_method = "poisson",
init.method = "kmeans",
method_admix = 0,
tmax=50)
omega <- topic_clus_1$omega
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(as.character(dat$g),
levels=unique(dat$g)) )
rownames(omega) <- annotation$sample_id
cols1 <- c(rev(RColorBrewer::brewer.pal(12, "Paired"))[c(3,4,7,8,11,12,5,6,9,10)],
RColorBrewer::brewer.pal(12, "Set3")[c(1,2,5,8,9)],
RColorBrewer::brewer.pal(9, "Set1")[c(9,7)],
RColorBrewer::brewer.pal(8, "Dark2")[c(3,4,8)])
CountClust::StructureGGplot(omega = omega,
annotation= annotation,
palette = cols1,
yaxis_label = "",
order_sample = TRUE,
split_line = list(split_lwd = .1,
split_col = "white"),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 5,
axis_label_face="bold"))
plot(topic_clus_1$theta[,1], type="l", col="red")
lines(topic_clus_1$theta[,2], type="l", col="green")
lines(topic_clus_1$theta[,3], type="l", col="blue")
save(topic_clus_1, file="../rdas/smashtpx_on_OAS1.rda")
topic_clus <- maptpx::topics(counts, K=3, tol=0.01);
plot(topic_clus$theta[,1], type="l", col="red")
lines(topic_clus$theta[,2], type="l", col="green")
lines(topic_clus$theta[,3], type="l", col="blue")
setwd("~/Documents/ancient-damage/R")
library(aRchaic)
gossling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
system.time(gossling_data_clubbed <- club_signature_counts(gossling_data))
gossling_data_clubbed <- gossling_data_clubbed[-28,];
names <- rownames(gossling_data_clubbed);
control_indices <- c(grep("EXN", names), grep("Libneg", names), grep("PCRneg", names))
labs <- character();
labs <- rep("ancient", dim(gossling_data_clubbed)[1])
labs[control_indices] <- "controls"
indices <- which(labs == "ancient")
gossling_ancients <- gossling_data_clubbed[indices, ]
sherpa_data <- get(load("../processed_data/sherpa2017.rda"))
sardinia_data <- get(load("../processed_data/sardinia2017.rda"))
pooled_names <- intersect(colnames(sherpa_data), intersect(colnames(sardinia_data), colnames(gossling_ancients)))
filtered_gossling <- gossling_ancients[, match(pooled_names, colnames(gossling_ancients))]
filtered_sherpa <- sherpa_data[, match(pooled_names, colnames(sherpa_data))]
filtered_sardinia <- sardinia_data[, match(pooled_names, colnames(sardinia_data))]
pooled_data <- rbind(filtered_gossling, filtered_sherpa, filtered_sardinia)
devtools::install_github("aRchaic")
devtools::install_github("kkdey/aRchaic")
library(aRchaic)
library(aRchaic)
gossling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
system.time(gossling_data_clubbed <- club_signature_counts(gossling_data))
gossling_data_clubbed <- gossling_data_clubbed[-28,];
names <- rownames(gossling_data_clubbed);
control_indices <- c(grep("EXN", names), grep("Libneg", names), grep("PCRneg", names))
labs <- character();
labs <- rep("ancient", dim(gossling_data_clubbed)[1])
labs[control_indices] <- "controls"
indices <- which(labs == "ancient")
gossling_ancients <- gossling_data_clubbed[indices, ]
sherpa_data <- get(load("../processed_data/sherpa2017.rda"))
sardinia_data <- get(load("../processed_data/sardinia2017.rda"))
pooled_names <- intersect(colnames(sherpa_data), intersect(colnames(sardinia_data), colnames(gossling_ancients)))
filtered_gossling <- gossling_ancients[, match(pooled_names, colnames(gossling_ancients))]
filtered_sherpa <- sherpa_data[, match(pooled_names, colnames(sherpa_data))]
filtered_sardinia <- sardinia_data[, match(pooled_names, colnames(sardinia_data))]
pooled_data <- rbind(filtered_gossling, filtered_sherpa, filtered_sardinia)
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-3.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]), rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-5.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]), rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-5.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]),
rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
out <- get(load("../processed_data/maptpx-runs/sards-gosling-sherpa-maptpx-independent-K-10.rda"))
labs <- c(rep("Gossling", dim(filtered_gossling)[1]),
rep("Sherpa", dim(filtered_sherpa)[1]),
rep("Sardinians", dim(filtered_sardinia)[1]))
omega <- out$omega
cols1 <- c("red","blue","darkgoldenrod1","cyan","firebrick", "green",
"hotpink","burlywood","yellow","darkgray","deepskyblue","darkkhaki",
"brown4","darkorchid","magenta","yellow", "azure1","azure4")
rownames(omega) <- 1:dim(omega)[1]
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = cols1,
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
damageLogo_pos(out$theta)
